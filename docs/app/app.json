[{"name":"app.R","content":"library(shiny)\nlibrary(bslib)\n\n# Define UI for random distribution app ----\n# Sidebar layout with input and output definitions ----\n\n# Define UI for Tab 1\nui_tab1 <- function() {\n  fluidRow(\n    column(6,\n           # Dropdown menu for selecting disease\n           radioButtons(\"virus\", \"Virus Incidence:\",\n                        c(\"Influenza A\" = \"resul_inf_a_all\",\n                          \"Influenza B\" = \"resul_inf_b_all\",\n                          \"RSV\" = \"resul_rsv_all\",\n                          \"PCR-Confirmed SARS-CoV-2\" = \"resul_sars_all\",\n                          \"Rapid Antigen Test-Confirmed SARS-CoV-2\" = \"resul_covid_19_all\")),\n    ),\n    column(6,\n           # Date range input\n           dateRangeInput(\"date_range_input_tab1\", \"Select Date Range:\",\n                          start = \"2020-01-01\", end = Sys.Date())\n    ),\n    column(12,\n           # Plot output for the graph\n           plotOutput(\"disease_plot_tab1\")\n    )\n  )\n}\n\n\n# Define UI for Tab 2\nui_tab2 <- function() {\n  fluidRow(\n    column(12,\n           # Customize the UI for Tab 2 here\n           tags$h2(\"Custom UI for Tab 2\"),\n           # Add UI elements specific to Tab 2\n           sliderInput(\"slider_input_tab2\", \"Slider Input\", min = 0, max = 100, value = 50),\n           selectInput(\"select_input_tab2\", \"Select Input\", choices = c(\"Option 1\", \"Option 2\", \"Option 3\"))\n    )\n  )\n}\n\n# Define UI for Tab 3\nui_tab3 <- function() {\n  fluidRow(\n    column(12,\n           # Customize the UI for Tab 3 here\n           tags$h2(\"Custom UI for Tab 3\"),\n           # Add UI elements specific to Tab 3\n           dateInput(\"date_input_tab3\", \"Date Input\", value = Sys.Date()),\n           actionButton(\"action_button_tab3\", \"Action Button\")\n    )\n  )\n}\n\n# Define UI for application\nui <- fluidPage(\n  \n  # Application title\n  titlePanel(\"Infectious Disease Incidence in Guatemala\"),\n  \n  # Main panel content goes here\n  tabsetPanel(\n    # Define the three tabs\n    tabPanel(\"Influenza Study\", ui_tab1()),\n    tabPanel(\"Agri-Casa Study\", ui_tab2()),\n    tabPanel(\"NAMRU-Biofire Study\", ui_tab3())\n  )\n)\n\n\n# Define server logic ----\nserver <- function(input, output) {\n  \n  # Reactive expression to filter data based on selected disease and date range\n  filtered_data <- reactive({\n    # Load dataframe\n    data <- read.csv(\"https://raw.githubusercontent.com/ggionet1/Guatemala_Infectious_Incidence/main/docs/influenza_summary.csv\")\n\n    # Filter data based on selected date range\n    subset(data, epiweek_recolec >= input$date_range_input_tab1[1] & \n             epiweek_recolec <= input$date_range_input_tab1[2])\n  })\n  \n  # Render the plot based on filtered data\n  output$disease_plot_tab1 <- renderPlot({\n    filtered <- filtered_data()\n    count_all_column_name <- paste0(\"count_all_\", input$virus)\n    count_pos_column_name <- paste0(\"count_pos_\", input$virus)\n    pct_pos_column_name <- paste0(\"pct_pos_\", input$virus)\n    \n    virus_labels <- c(\"resul_inf_a_all\" = \"Influenza A\",\n      \"resul_inf_b_all\" = \"Influenza B\",\n      \"resul_rsv_all\" = \"RSV\",\n       \"resul_sars_all\" = \"PCR-Confirmed SARS-CoV-2\",\n       \"resul_covid_19_all\" = \"Rapid Antigen Test-Confirmed SARS-CoV-2\")\n    selected_virus_label <- virus_labels[[input$virus]]\n    \n    ggplot(filtered, aes(x = epiweek_recolec)) +\n      geom_bar(aes(y = .data[[count_all_column_name]], fill = \"Total\"), stat = \"identity\") +\n      geom_bar(aes(y = .data[[count_pos_column_name]], fill = \"Positive\"), stat = \"identity\") +\n      scale_fill_manual(values = c(\"Total\" = \"grey\", \"Positive\" = \"red\")) +\n      geom_text_repel(aes(y = .data[[count_pos_column_name]], \n                          label = ifelse(filtered[[pct_pos_column_name]] > 0, paste0(round(filtered[[pct_pos_column_name]]), \"%\"), \"\")),\n                      vjust = -0.5, color = \"black\", size = 3) +\n      theme_classic() +\n      labs(title = paste(\"Counts of\", selected_virus_label, \"over Time\"),\n           x = \"Epiweek\",\n           y = \"Number of Tests\",\n           fill = \"Test Positivity\") +\n      scale_y_continuous(breaks = seq(0, max(filtered[[count_all_column_name]]), by = 1))+\n      theme(axis.text.x = element_blank())\n    \n  })\n}\n\nshinyApp(ui, server)\n\n# https://medium.com/@rami.krispin/deploy-shiny-app-on-github-pages-b4cbd433bdc\n\n","type":"text"},{"name":"deploy_app.R","content":"library(rsconnect)\nlibrary(shinylive)\nlibrary(httpuv)\n\ngetwd()\n\n# Connect the r script below to an R shiny app\nrsconnect::setAccountInfo(name='cutrifinio', token='C0BFCA28C1FE0F83CB5E67B30FA01E0E', secret='b6lWE/Jk2CFw+J5Vu6F3zXxgyk/AsEu9iuVcBGxG')\n\n# Deploy app\n#rsconnect::deployApp('code/app.R')\nshinylive::export(appdir = \"code/\", destdir = \"docs/app/\")\n\n# Run app from server\nhttpuv::runStaticServer(\"docs/app/\", port=8008)\n","type":"text"},{"name":"redcap_data_processing.R","content":"# The purpose of this R script is to load data from Redcap and save the dataframes\n\n# Load Packages --------------------------------------------\n\nlibrary(remotes)\nlibrary(usethis)\nlibrary(REDCapR)\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(purrr)\nlibrary(ggrepel)\nlibrary(dplyr)\n\n#Your API token will be stored here:\n# usethis::edit_r_environ()\n\n# Load Data --------------------------------------------\n\nagri_casa_token <- Sys.getenv(\"agri_casa_token\")\nprint(agri_casa_token)\nnamru_biofire_token <- Sys.getenv(\"namru_biofire_token\")\ninfluenza_token <- Sys.getenv(\"influenza_token\")\n\nuri <- \"https://redcap.ucdenver.edu/api/\"\n\nagri_casa <- \n  REDCapR::redcap_read(\n    redcap_uri  = uri, \n    token       = agri_casa_token\n  )$data\n\nnamru_biofire <- \n  REDCapR::redcap_read(\n    redcap_uri  = uri, \n    token       = namru_biofire_token\n  )$data\n\ninfluenza <- \n  REDCapR::redcap_read(\n    redcap_uri  = uri, \n    token       = influenza_token\n  )$data\n\n\n# Prepare Influenza dataset --------------------------------------------------\n\n# Create epiweek\ninfluenza$epiweek_recolec <- floor_date(influenza$fecha_recolec, unit = \"week\", week_start = 1)\n\n# Issue 1: How to deal with follow-up results (if sample is unprocessed or indeterminant (3 or 5))\n# We can create a new column for this\ncreate_new_column <- function(df, col1, col2, new_col) {\n  df[[new_col]] <- ifelse(is.na(df[[col1]]), NA,\n                          ifelse(df[[col1]] == 1, 1,\n                                 ifelse(df[[col1]] == 2, 2,\n                                        ifelse(df[[col1]] == 3 & is.na(df[[col2]]), 3,\n                                               ifelse(df[[col1]] == 3 & !is.na(df[[col2]]) & df[[col2]] == 3, df[[col2]], NA)\n                                        )\n                                 )\n                          )\n  )\n  return(df)\n}\n\n# Columns to iterate over\ncolumns_to_iterate <- list(\n  list(\"resul_inf_a\", \"resul_inf_a_2\", \"resul_inf_a_all\"),\n  list(\"resul_rsv\", \"resul_vsr_2\", \"resul_rsv_all\"),\n  list(\"resul_inf_b\", \"resul_inf_b_2\", \"resul_inf_b_all\"),\n  list(\"resul_ocr_sars\", \"resul_pcr_sasrs2\", \"resul_sars_all\"),\n  list(\"resul_covid_19\", \"resul_covid_19_2\", \"resul_covid_19_all\")\n)\n\n# Apply the function to each pair of columns\nfor (cols in columns_to_iterate) {\n  influenza <- create_new_column(influenza, cols[[1]], cols[[2]], cols[[3]])\n}\n\n\n# Issue 2: What if the same individual is tested multiple times in the same week?\n# We don't care if the result is the same\n# We do care if one is positive (always prefer the positive value)\ninfluenza_by_indiv_by_epiweek <- influenza %>%\n  dplyr::filter(!is.na(resul_inf_a_all)) %>%\n  dplyr::group_by(record_id, epiweek_recolec) %>%\n  dplyr::slice(which.min(resul_inf_a_all))\n\nfilter_group_slice <- function(data, column) {\n  data %>%\n    dplyr::filter(!is.na(!!sym(column))) %>%\n    dplyr::group_by(record_id, epiweek_recolec) %>%\n    dplyr::slice(which.min(!!sym(column)))%>%\n    dplyr::select(c(record_id, epiweek_recolec, column))\n}\n\ncolumns_to_process <- c(\"resul_inf_a_all\", \"resul_rsv_all\", \"resul_inf_b_all\",\"resul_sars_all\", \"resul_covid_19_all\")\n\n# Create a place to store summarized data\nsummary_dataframes <- list()\n\n# Apply the function to each column and create new dataframes\nfor (col in columns_to_process) {\n  summary_dataframes[[col]] <- filter_group_slice(influenza, col)\n}\n\n# Merge all dataframes together so that we have data per person per week\nmerged_summary <- Reduce(function(x, y) merge(x, y, by = c(\"record_id\", \"epiweek_recolec\"), all = TRUE), summary_dataframes)\n\n\n# Plot a specific disease over time\ninfluenza_summary <- merged_summary%>%\n  dplyr::group_by(epiweek_recolec)%>%\n  dplyr::summarise(\n    # Count total number of individuals tested per week\n    count_inf_a_all = sum(!is.na(resul_inf_a_all), na.rm = TRUE),\n    # Count total number of negatives per week\n    count_inf_a_neg = sum(resul_inf_a_all == 2, na.rm = TRUE),\n    # Count total number of positives per week\n    count_inf_a_pos = sum(resul_inf_a_all == 1, na.rm = TRUE),\n    # Count percentage of positives to negatives per week\n    pct_inf_a_pos = ifelse(count_inf_a_pos==0, 0,\n                           count_inf_a_pos/sum(count_inf_a_neg+count_inf_a_pos, na.rm=TRUE)*100)\n    \n  )\n\ngenerate_summary <- function(data, column) {\n  data %>%\n    dplyr::group_by(epiweek_recolec) %>%\n    dplyr::summarise(\n      count_all = sum(!is.na(.data[[column]]), na.rm = TRUE),\n      count_neg = sum(.data[[column]] == 2, na.rm = TRUE),\n      count_pos = sum(.data[[column]] == 1, na.rm = TRUE),\n      count_undetermined = sum(.data[[column]] == 3, na.rm = TRUE),\n      count_unprocessed = sum(.data[[column]] == 5, na.rm = TRUE),\n      pct_pos = ifelse(count_pos == 0, 0,\n                       count_pos / sum(count_neg + count_pos, na.rm = TRUE) * 100)\n    ) %>%\n    dplyr::mutate(disease = column)\n}\n\n# Columns to process\ncolumns_to_process <- c(\"resul_inf_a_all\", \"resul_rsv_all\", \"resul_inf_b_all\", \"resul_sars_all\", \"resul_covid_19_all\")\n\n# Apply the function to each column and combine results into a long dataframe\nsummary_combined <- lapply(columns_to_process, function(col) generate_summary(merged_summary, col)) %>%\n  dplyr::bind_rows()%>%\n  tidyr::pivot_wider(names_from = disease,\n              values_from = c(count_all, count_neg, count_pos, pct_pos))\n\n# Save the summary dataframe\ninfluenza_csv_file <- \"docs/influenza_summary.csv\"\nwrite.csv(summary_combined, file = influenza_csv_file, row.names = FALSE)\n","type":"text"}]
